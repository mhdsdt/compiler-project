Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> EPSILON
Declaration -> #declare Declaration-initial Declaration-prime #pop
Declaration-initial -> Type-specifier #declare_id #pid ID
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ;
Var-declaration-prime -> [ #pnum NUM ] #declare_arr ;
Fun-declaration-prime -> #declare_func #set_exec #scmod_t #sc_start ( #arg_init Params #arg_finish ) #scmod_f #sc_start Compound-stmt #sc_stop #scmod_f #sc_stop #scmod_t #return
Type-specifier -> int
Type-specifier -> void
Params -> #declare int #declare_id #pid ID Param-prime #pop Param-list
Params -> void
Param-list -> , Param Param-list
Param-list -> EPSILON
Param -> #declare Declaration-initial Param-prime #pop
Param-prime -> [ ]
Param-prime -> EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list
Statement-list -> EPSILON
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Expression-stmt -> Expression #pop ;
Expression-stmt -> break #scmod_c #prison ;
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #hold #scmod_s #sc_start Statement #sc_stop #scmod_s #scmod_t #prison #decide else #scmod_s #sc_start Statement #sc_stop #scmod_s #scmod_t #prison_break
Iteration-stmt -> repeat Statement #jump_repeat #sc_stop #scmod_c #decide until #label ( Expression ) #hold #scmod_c #sc_start
Return-stmt -> return Return-stmt-prime #scmod_f #prison
Return-stmt-prime -> ;
Return-stmt-prime -> #prv Expression #assign #pop ;
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #parr H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #op_exec
C -> EPSILON
Relop -> #op_push <
Relop -> #op_push ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #op_exec D
D -> EPSILON
Addop -> #op_push +
Addop -> #op_push -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> #op_push * Factor #op_exec G
G -> EPSILON
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> ( #arg_pass Args ) #call
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #parr
Var-prime -> EPSILON
Factor-prime -> ( #arg_pass Args ) #call
Factor-prime -> EPSILON
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> EPSILON
